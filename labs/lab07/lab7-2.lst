     1                                  %include 'in_out.asm'
     1                              <1> ;---------------   slen  -------------------
     2                              <1> ; Функция вычисления длины сообщения
     3                              <1> slen:                     
     4 00000000 53                  <1>     push    ebx             
     5 00000001 89C3                <1>     mov     ebx, eax        
     6                              <1>     
     7                              <1> nextchar:                   
     8 00000003 803800              <1>     cmp     byte [eax], 0   
     9 00000006 7403                <1>     jz      finished        
    10 00000008 40                  <1>     inc     eax             
    11 00000009 EBF8                <1>     jmp     nextchar        
    12                              <1>     
    13                              <1> finished:
    14 0000000B 29D8                <1>     sub     eax, ebx
    15 0000000D 5B                  <1>     pop     ebx             
    16 0000000E C3                  <1>     ret                     
    17                              <1> 
    18                              <1> 
    19                              <1> 
    20                              <1> 
    21                              <1> ;---------------  sprint  -------------------
    22                              <1> ; Функция печати сообщения
    23                              <1> ; входные данные: mov eax,<message>
    24                              <1> sprint:
    25 0000000F 52                  <1>     push    edx
    26 00000010 51                  <1>     push    ecx
    27 00000011 53                  <1>     push    ebx
    28 00000012 50                  <1>     push    eax
    29 00000013 E8E8FFFFFF          <1>     call    slen
    30                              <1>     
    31 00000018 89C2                <1>     mov     edx, eax
    32 0000001A 58                  <1>     pop     eax
    33                              <1>     
    34 0000001B 89C1                <1>     mov     ecx, eax
    35 0000001D BB01000000          <1>     mov     ebx, 1
    36 00000022 B804000000          <1>     mov     eax, 4
    37 00000027 CD80                <1>     int     80h
    38                              <1> 
    39 00000029 5B                  <1>     pop     ebx
    40 0000002A 59                  <1>     pop     ecx
    41 0000002B 5A                  <1>     pop     edx
    42 0000002C C3                  <1>     ret
    43                              <1> 
    44                              <1> 
    45                              <1> ;----------------  sprintLF  ----------------
    46                              <1> ; Функция печати сообщения с переводом строки
    47                              <1> ; входные данные: mov eax,<message>
    48                              <1> sprintLF:
    49 0000002D E8DDFFFFFF          <1>     call    sprint
    50                              <1> 
    51 00000032 50                  <1>     push    eax
    52 00000033 B80A000000          <1>     mov     eax, 0AH
    53 00000038 50                  <1>     push    eax
    54 00000039 89E0                <1>     mov     eax, esp
    55 0000003B E8CFFFFFFF          <1>     call    sprint
    56 00000040 58                  <1>     pop     eax
    57 00000041 58                  <1>     pop     eax
    58 00000042 C3                  <1>     ret
    59                              <1> 
    60                              <1> ;---------------  sread  ----------------------
    61                              <1> ; Функция считывания сообщения
    62                              <1> ; входные данные: mov eax,<buffer>, mov ebx,<N>
    63                              <1> sread:
    64 00000043 53                  <1>     push    ebx
    65 00000044 50                  <1>     push    eax
    66                              <1>    
    67 00000045 BB00000000          <1>     mov     ebx, 0
    68 0000004A B803000000          <1>     mov     eax, 3
    69 0000004F CD80                <1>     int     80h
    70                              <1> 
    71 00000051 5B                  <1>     pop     ebx
    72 00000052 59                  <1>     pop     ecx
    73 00000053 C3                  <1>     ret
    74                              <1>     
    75                              <1> ;------------- iprint  ---------------------
    76                              <1> ; Функция вывода на экран чисел в формате ASCII
    77                              <1> ; входные данные: mov eax,<int>
    78                              <1> iprint:
    79 00000054 50                  <1>     push    eax             
    80 00000055 51                  <1>     push    ecx             
    81 00000056 52                  <1>     push    edx             
    82 00000057 56                  <1>     push    esi             
    83 00000058 B900000000          <1>     mov     ecx, 0          
    84                              <1>     
    85                              <1> divideLoop:
    86 0000005D 41                  <1>     inc     ecx             
    87 0000005E BA00000000          <1>     mov     edx, 0          
    88 00000063 BE0A000000          <1>     mov     esi, 10  
    89 00000068 F7FE                <1>     idiv    esi    
    90 0000006A 83C230              <1>     add     edx, 48  
    91 0000006D 52                  <1>     push    edx   
    92 0000006E 83F800              <1>     cmp     eax, 0   
    93 00000071 75EA                <1>     jnz     divideLoop  
    94                              <1> 
    95                              <1> printLoop:
    96 00000073 49                  <1>     dec     ecx       
    97 00000074 89E0                <1>     mov     eax, esp  
    98 00000076 E894FFFFFF          <1>     call    sprint   
    99 0000007B 58                  <1>     pop     eax    
   100 0000007C 83F900              <1>     cmp     ecx, 0   
   101 0000007F 75F2                <1>     jnz     printLoop  
   102                              <1> 
   103 00000081 5E                  <1>     pop     esi   
   104 00000082 5A                  <1>     pop     edx    
   105 00000083 59                  <1>     pop     ecx   
   106 00000084 58                  <1>     pop     eax           
   107 00000085 C3                  <1>     ret
   108                              <1> 
   109                              <1> 
   110                              <1> ;--------------- iprintLF   --------------------
   111                              <1> ; Функция вывода на экран чисел в формате ASCII
   112                              <1> ; входные данные: mov eax,<int>
   113                              <1> iprintLF:
   114 00000086 E8C9FFFFFF          <1>     call    iprint          
   115                              <1> 
   116 0000008B 50                  <1>     push    eax             
   117 0000008C B80A000000          <1>     mov     eax, 0Ah        
   118 00000091 50                  <1>     push    eax             
   119 00000092 89E0                <1>     mov     eax, esp       
   120 00000094 E876FFFFFF          <1>     call    sprint          
   121 00000099 58                  <1>     pop     eax             
   122 0000009A 58                  <1>     pop     eax             
   123 0000009B C3                  <1>     ret
   124                              <1> 
   125                              <1> ;----------------- atoi  ---------------------
   126                              <1> ; Функция преобразования ascii-код символа в целое число
   127                              <1> ; входные данные: mov eax,<int>
   128                              <1> atoi:
   129 0000009C 53                  <1>     push    ebx             
   130 0000009D 51                  <1>     push    ecx             
   131 0000009E 52                  <1>     push    edx             
   132 0000009F 56                  <1>     push    esi             
   133 000000A0 89C6                <1>     mov     esi, eax        
   134 000000A2 B800000000          <1>     mov     eax, 0          
   135 000000A7 B900000000          <1>     mov     ecx, 0          
   136                              <1>  
   137                              <1> .multiplyLoop:
   138 000000AC 31DB                <1>     xor     ebx, ebx        
   139 000000AE 8A1C0E              <1>     mov     bl, [esi+ecx]
   140 000000B1 80FB30              <1>     cmp     bl, 48 
   141 000000B4 7C14                <1>     jl      .finished 
   142 000000B6 80FB39              <1>     cmp     bl, 57  
   143 000000B9 7F0F                <1>     jg      .finished 
   144                              <1>  
   145 000000BB 80EB30              <1>     sub     bl, 48 
   146 000000BE 01D8                <1>     add     eax, ebx
   147 000000C0 BB0A000000          <1>     mov     ebx, 10  
   148 000000C5 F7E3                <1>     mul     ebx  
   149 000000C7 41                  <1>     inc     ecx   
   150 000000C8 EBE2                <1>     jmp     .multiplyLoop  
   151                              <1>  
   152                              <1> .finished:
   153 000000CA 83F900              <1>     cmp     ecx, 0  
   154 000000CD 7407                <1>     je      .restore   
   155 000000CF BB0A000000          <1>     mov     ebx, 10  
   156 000000D4 F7F3                <1>     div     ebx     
   157                              <1>  
   158                              <1> .restore:
   159 000000D6 5E                  <1>     pop     esi   
   160 000000D7 5A                  <1>     pop     edx    
   161 000000D8 59                  <1>     pop     ecx  
   162 000000D9 5B                  <1>     pop     ebx 
   163 000000DA C3                  <1>     ret
   164                              <1> 
   165                              <1> 
   166                              <1> ;------------- quit   ---------------------
   167                              <1> ; Функция завершения программы
   168                              <1> quit:
   169 000000DB BB00000000          <1>     mov     ebx, 0      
   170 000000E0 B801000000          <1>     mov     eax, 1      
   171 000000E5 CD80                <1>     int     80h
   172 000000E7 C3                  <1>     ret
     2                                  section .data
     3 00000000 D092D0B2D0B5D0B4D0-     msg1 db 'Введите B: ',0h
     3 00000009 B8D182D0B520423A20-
     3 00000012 00                 
     4 00000013 D09DD0B0D0B8D0B1D0-     msg2 db "Наибольшее число: ",0h
     4 0000001C BED0BBD18CD188D0B5-
     4 00000025 D0B520D187D0B8D181-
     4 0000002E D0BBD0BE3A2000     
     5 00000035 32300000                A dd '20'
     6 00000039 35300000                C dd '50'
     7                                  section .bss
     8 00000000 <res 0000000A>          max resb 10
     9 0000000A <res 0000000A>          B resb 10
    10                                  section .text
    11                                  global _start
    12                                  _start:
    13                                  ; ---------- Вывод сообщения 'Введите B: '
    14 000000E8 B8[00000000]            mov eax,msg1
    15 000000ED E81DFFFFFF              call sprint
    16                                  ; ---------- Ввод 'B'
    17 000000F2 B9[0A000000]            mov ecx,B
    18 000000F7 BA0A000000              mov edx,10
    19 000000FC E842FFFFFF              call sread
    20                                  ; ---------- Преобразование 'B' из символа в число
    21 00000101 B8[0A000000]            mov eax,B
    22 00000106 E891FFFFFF              call atoi
    23 0000010B A3[0A000000]            mov [B],eax
    24                                  ; ---------- Записываем 'A' в переменную 'max'
    25 00000110 8B0D[35000000]          mov ecx,[A] 
    26 00000116 890D[00000000]          mov [max],ecx
    27                                  ; ---------- Сравниваем 'A' и 'С' (как символы)
    28 0000011C 3B0D[39000000]          cmp ecx,[C]
    29 00000122 7F0C                    jg check_B
    30 00000124 8B0D[39000000]          mov ecx,[C] 
    31 0000012A 890D[00000000]          mov [max],ecx
    32                                  ; ---------- Преобразование 'max(A,C)' из символа в число
    33                                  check_B:
    34 00000130 B8[00000000]            mov eax,max
    35 00000135 E862FFFFFF              call atoi
    36                                  mov [max],
    36          ******************       error: invalid combination of opcode and operands
    37                                  ; ---------- Сравниваем 'max(A,C)' и 'B' (как числа)
    38 0000013A 8B0D[00000000]          mov ecx,[max]
    39 00000140 3B0D[0A000000]          cmp ecx,[B]
    40 00000146 7F0C                    jg fin
    41 00000148 8B0D[0A000000]          mov ecx,[B]
    42 0000014E 890D[00000000]          mov [max],ecx
    43                                  ; ---------- Вывод результата
    44                                  fin:
    45 00000154 B8[13000000]            mov eax, msg2
    46 00000159 E8B1FEFFFF              call sprint
    47 0000015E A1[00000000]            mov eax,[max]
    48 00000163 E81EFFFFFF              call iprintLF
    49 00000168 E86EFFFFFF              call quit
